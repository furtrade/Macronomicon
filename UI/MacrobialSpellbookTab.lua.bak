local addonName, addon = ...

-- Positioning options table
local positionOptions = {
    startX1 = 0.18, -- Column 1 X position as a percentage of frame width
    startX2 = 0.58, -- Column 2 X position as a percentage of frame width
    margin = 0.14, -- Top and bottom margin as a percentage of frame height
    iconSize = 45, -- Size of the button's icon
    maxRows = 6 -- Maximum number of rows per column
}

-- Create a new tab in the spellbook
local function CreateSpellbookTab()
    -- Determine the number of existing tabs
    local numTabs = 0
    while _G["SpellBookSkillLineTab" .. (numTabs + 1)] do
        numTabs = numTabs + 1
    end

    local tab = CreateFrame("Button", "MacrobialSpellbookTab", SpellBookFrame, "SpellBookSkillLineTabTemplate")
    tab:SetPoint("TOPLEFT", _G["SpellBookSkillLineTab" .. numTabs], "BOTTOMLEFT", 0, -17)
    tab:SetNormalTexture("Interface\\Icons\\INV_Misc_QuestionMark")
    tab.tooltip = "Macrobial"

    tab:SetScript("OnClick", function(self)
        if not MacrobialSpellbookFrame then
            CreateMacrobialSpellbookFrame()
        end
        MacrobialSpellbookFrame:Show()
    end)

    tab:Show()
    return tab
end

-- Create the Macrobial spellbook frame
function CreateMacrobialSpellbookFrame()
    local frame = CreateFrame("Frame", "MacrobialSpellbookFrame", SpellBookFrame, "BackdropTemplate")
    frame:SetPoint("TOPLEFT", SpellBookFrame, "TOPLEFT", 0, 0)
    frame:SetPoint("BOTTOMRIGHT", SpellBookFrame, "BOTTOMRIGHT", 0, 0)
    frame:SetBackdrop({
        bgFile = "Interface\\Buttons\\WHITE8x8",
        edgeFile = "Interface\\DialogFrame\\UI-DialogBox-Border",
        tile = true,
        tileSize = 32,
        edgeSize = 32,
        insets = {
            left = 11,
            right = 12,
            top = 12,
            bottom = 11
        }
    })
    frame:SetBackdropColor(0, 0, 0, 1)
    frame:SetBackdropBorderColor(1, 1, 1, 1)
    frame:EnableMouse(true)
    frame:SetToplevel(true)

    -- Set frame level to be just below the SpellBookFrame
    frame:SetFrameLevel(SpellBookFrame:GetFrameLevel() + 3)

    -- Create draggable buttons for the frame
    local function CreateDraggableButton(name, spellID)
        local button = CreateFrame("Button", name, frame, "SecureActionButtonTemplate, ActionButtonTemplate")
        button:SetSize(positionOptions.iconSize, positionOptions.iconSize)
        button:SetAttribute("type", "spell")
        button:SetAttribute("spell", spellID)
        button.icon = _G[name .. "Icon"]
        button.icon:SetTexture(GetSpellTexture(spellID))

        button:SetScript("OnEnter", function(self)
            GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
            GameTooltip:SetSpellByID(spellID)
            GameTooltip:Show()
        end)

        button:SetScript("OnLeave", function(self)
            GameTooltip:Hide()
        end)

        button:SetScript("OnDragStart", function(self)
            PickupSpell(spellID)
        end)

        button:SetScript("OnReceiveDrag", function(self)
            PlaceAction(GetCursorInfo())
            ClearCursor()
        end)

        button:RegisterForDrag("LeftButton")
        return button
    end

    local spells = {6603, -- Auto Attack
    312411, -- Bag of Tricks
    368896, -- Dragonriding
    312425, -- Make Camp
    312724, -- Return to Camp
    125439, -- Revive Battle Pets
    309819, -- Rummage Your Bag
    312411, -- Alpaca Saddlebags
    34091, -- Artisan Riding
    233368 -- Battle for Azeroth Pathfinder
    }

    -- Filter out invalid spell IDs
    local validSpells = {}
    for _, spellID in ipairs(spells) do
        local spellName = GetSpellInfo(spellID)
        if spellName then
            table.insert(validSpells, spellID)
        end
    end

    table.sort(validSpells, function(a, b)
        local nameA = GetSpellInfo(a)
        local nameB = GetSpellInfo(b)
        return nameA > nameB -- Descending alphabetical order
    end)

    local frameWidth = frame:GetWidth()
    local frameHeight = frame:GetHeight()
    local startX1 = frameWidth * positionOptions.startX1
    local startX2 = frameWidth * positionOptions.startX2
    local margin = frameHeight * positionOptions.margin
    local usableHeight = frameHeight - (2 * margin)
    local paddingY = (usableHeight - (positionOptions.maxRows * positionOptions.iconSize)) /
                         (positionOptions.maxRows - 1)

    for i, spellID in ipairs(validSpells) do
        local buttonName = "MacrobialSpellButton" .. i
        local button = CreateDraggableButton(buttonName, spellID)
        local column = math.floor((i - 1) / positionOptions.maxRows)
        local row = (i - 1) % positionOptions.maxRows
        local xOffset = column == 0 and startX1 or startX2
        local yOffset = -margin - (row * (positionOptions.iconSize + paddingY)) + frame:GetHeight() * 0.01 -- Small adjustment for y-axis offset
        button:SetPoint("TOPLEFT", frame, "TOPLEFT", xOffset, yOffset)
        button:Show()
    end

    MacrobialSpellbookFrame = frame
    frame:Hide()
end

-- Initialize the tab
CreateSpellbookTab()
